run:
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:append
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:X
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:append
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..FCall:FCall
....UserFName:append
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:a
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b
......]:]
....):)

SymbolLiteral:x

ListLiteral:ListLiteral
..[:[
..SymbolLiteral:y
..SymbolLiteral:z
..SymbolLiteral:w
..]:]

IfExpr:IfExpr
..if:if
..ListLiteral:ListLiteral
....[:[
....]:]
..SymbolLiteral:b
..SymbolLiteral:c

IfExpr:IfExpr
..if:if
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:a0
....SymbolLiteral:b0
....]:]
..SymbolLiteral:a0
..ListLiteral:ListLiteral
....[:[
....]:]

IfExpr:IfExpr
..if:if
..SymbolLiteral:a1
..SymbolLiteral:b1
..SymbolLiteral:c1

IfExpr:IfExpr
..if:if
..SymbolLiteral:a2
..IfExpr:IfExpr
....if:if
....SymbolLiteral:b2
....SymbolLiteral:c2
....SymbolLiteral:d2
..SymbolLiteral:e2

IfExpr:IfExpr
..if:if
..IfExpr:IfExpr
....if:if
....SymbolLiteral:a3
....SymbolLiteral:b3
....SymbolLiteral:c3
..SymbolLiteral:d3
..SymbolLiteral:e3

FCall:FCall
..PrimFName:cons
..(:(
..SymbolLiteral:a4
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:b4
....]:]
..):)

FCall:FCall
..PrimFName:cons
..(:(
..SymbolLiteral:a5
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:b5
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:c5
......]:]
....):)
..):)

FCall:FCall
..PrimFName:car
..(:(
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:a6
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b6
......]:]
....):)
..):)

FCall:FCall
..PrimFName:cdr
..(:(
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:a7
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b7
......]:]
....):)
..):)

x5 found, define expected
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....FCall:FCall
......UserFName:x6
......(:(
......):)
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b6
......]:]
..FCall:FCall
....UserFName:x6
....(:(
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....FCall:FCall
......UserFName:x7
......(:(
......):)
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b7
......]:]
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:a7
....FCall:FCall
......UserFName:x7
......(:(
......):)
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....FCall:FCall
......UserFName:x8
......(:(
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......SymbolLiteral:b8
......ListLiteral:ListLiteral
........[:[
........SymbolLiteral:b9
........]:]
......):)
..FCall:FCall
....UserFName:x8
....(:(
....):)

Found unread symbols at the end of the input: [define:define, UserFName:xx3, (:(, ):), [:[, SymbolLiteral:x3, ]:], PrimFName:cons, (:(, UserFName:xx1, (:(, ):), PrimFName:cons, (:(, UserFName:xx2, (:(, ):), UserFName:xx3, (:(, ):), ):), ):)]
Found unread symbols at the end of the input: [define:define, UserFName:xy3, (:(, ):), [:[, SymbolLiteral:xy3, ]:], PrimFName:cons, (:(, UserFName:xy1, (:(, ):), UserFName:xy3, (:(, ):), ):)]
Found unread symbols at the end of the input: [PrimFName:cons, (:(, UserFName:xy4, (:(, ):), UserFName:xy5, (:(, ):), ):)]
let found, define expected

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:g0
......(:(
......Var:X
......):)
....Var:X
..FCall:FCall
....UserFName:g0
....(:(
....SymbolLiteral:g
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:f0
......(:(
......Var:X
......Var:Y
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......Var:X
......Var:Y
......):)
..SymbolLiteral:f

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:f1
......(:(
......Var:X
......Var:Y
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......Var:X
......Var:Y
......):)
..FCall:FCall
....UserFName:f1
....(:(
....SymbolLiteral:af1
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:bf1
......]:]
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:f2
......(:(
......Var:X
......Var:Y
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......Var:X
......Var:Y
......):)
..FCall:FCall
....UserFName:f2
....(:(
....SymbolLiteral:af2
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:bf2
......]:]
....):)

Found unread symbols at the end of the input: [UserFName:g1, (:(, UserFName:g2, (:(, [:[, ]:], ):), ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:f3
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:X
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:f3
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..SymbolLiteral:f

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:append
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:X
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:append
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..FCall:FCall
....UserFName:append
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:a
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b
......]:]
....):)

Found unread symbols at the end of the input: [UserFName:g3, (:(, [:[, SymbolLiteral:g30, ]:], ):)]
Found unread symbols at the end of the input: [UserFName:g30, (:(, [:[, SymbolLiteral:f03, SymbolLiteral:f30, ]:], ):)]
Found unread symbols at the end of the input: [UserFName:reverse, (:(, [:[, SymbolLiteral:g31, SymbolLiteral:g32, SymbolLiteral:g33, SymbolLiteral:g34, ]:], ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:reverse
......(:(
......Var:X42
......):)
....IfExpr:IfExpr
......if:if
......Var:X42
......FCall:FCall
........UserFName:append
........(:(
........FCall:FCall
..........UserFName:reverse
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X42
............):)
..........):)
........FCall:FCall
..........PrimFName:cons
..........(:(
..........FCall:FCall
............PrimFName:car
............(:(
............Var:X42
............):)
..........ListLiteral:ListLiteral
............[:[
............]:]
..........):)
........):)
......Var:X42
..LetExpr:LetExpr
....let:let
....Def:Def
......define:define
......Sig:Sig
........UserFName:append
........(:(
........Var:X41
........Var:Y41
........):)
......IfExpr:IfExpr
........if:if
........Var:X41
........FCall:FCall
..........PrimFName:cons
..........(:(
..........FCall:FCall
............PrimFName:car
............(:(
............Var:X41
............):)
..........FCall:FCall
............UserFName:append
............(:(
............FCall:FCall
..............PrimFName:cdr
..............(:(
..............Var:X41
..............):)
............Var:Y41
............):)
..........):)
........Var:Y41
....FCall:FCall
......UserFName:reverse
......(:(
......ListLiteral:ListLiteral
........[:[
........SymbolLiteral:g41
........SymbolLiteral:g42
........SymbolLiteral:g43
........SymbolLiteral:g44
........]:]
......):)

Found unread symbols at the end of the input: [UserFName:f5, (:(, UserFName:g5, (:(, [:[, SymbolLiteral:a5, SymbolLiteral:a5, ]:], ):), UserFName:g5, (:(, [:[, SymbolLiteral:b5, SymbolLiteral:b5, ]:], ):), ):)]
Found unread symbols at the end of the input: [UserFName:g6, (:(, UserFName:f6, (:(, [:[, SymbolLiteral:a6, SymbolLiteral:a6, ]:], [:[, SymbolLiteral:b6, SymbolLiteral:b6, ]:], ):), ):)]
Found unread symbols at the end of the input: [UserFName:f7, (:(, UserFName:g7, (:(, ):), UserFName:g7, (:(, ):), ):)]
):) found, Expr expected
Found unread symbols at the end of the input: [UserFName:p, (:(, UserFName:q, (:(, [:[, SymbolLiteral:pp, ]:], ):), ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:q1
......(:(
......Var:Z
......):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:p1
..........(:(
..........Var:Y
..........):)
........FCall:FCall
..........PrimFName:cons
..........(:(
..........Var:Y
..........Var:Z
..........):)
......FCall:FCall
........UserFName:p1
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:Z
..........):)
........):)
..FCall:FCall
....UserFName:q1
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:p1
......SymbolLiteral:p2
......]:]
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:addlast
......(:(
......Var:P
......Var:Q
......):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:q2
..........(:(
..........Var:Q2
..........):)
........IfExpr:IfExpr
..........if:if
..........Var:Q2
..........FCall:FCall
............PrimFName:cons
............(:(
............FCall:FCall
..............PrimFName:car
..............(:(
..............Var:Q2
..............):)
............FCall:FCall
..............UserFName:q2
..............(:(
..............FCall:FCall
................PrimFName:cdr
................(:(
................Var:Q2
................):)
..............):)
............):)
..........FCall:FCall
............PrimFName:cons
............(:(
............Var:P
............ListLiteral:ListLiteral
..............[:[
..............]:]
............):)
......Sig:Sig
........UserFName:q2
........(:(
........Var:Q
........):)
..FCall:FCall
....UserFName:addlast
....(:(
....SymbolLiteral:p2
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:q2
......SymbolLiteral:p2
......SymbolLiteral:q2
......]:]
....):)

Found unread symbols at the end of the input: [UserFName:h9, (:(, UserFName:k9, (:(, [:[, SymbolLiteral:hk9, ]:], ):), ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:k8
......(:(
......Var:Y8
......):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:h8
..........(:(
..........Var:X8
..........):)
........IfExpr:IfExpr
..........if:if
..........Var:X8
..........FCall:FCall
............PrimFName:cons
............(:(
............SymbolLiteral:h8
............FCall:FCall
..............UserFName:k8
..............(:(
..............FCall:FCall
................PrimFName:cdr
................(:(
................Var:X8
................):)
..............):)
............):)
..........ListLiteral:ListLiteral
............[:[
............]:]
......IfExpr:IfExpr
........if:if
........Var:Y8
........FCall:FCall
..........PrimFName:cons
..........(:(
..........SymbolLiteral:k8
..........FCall:FCall
............UserFName:h8
............(:(
............FCall:FCall
..............PrimFName:cdr
..............(:(
..............Var:Y8
..............):)
............):)
..........):)
........ListLiteral:ListLiteral
..........[:[
..........]:]
..FCall:FCall
....UserFName:k8
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:k81
......SymbolLiteral:k81
......SymbolLiteral:k81
......SymbolLiteral:k81
......SymbolLiteral:k81
......]:]
....):)


Var:Q

FCall:FCall
..UserFName:null
..(:(
..ListLiteral:ListLiteral
....[:[
....]:]
..):)

FCall:FCall
..PrimFName:car
..(:(
..):)

FCall:FCall
..PrimFName:cdr
..(:(
..):)

FCall:FCall
..PrimFName:car
..(:(
..SymbolLiteral:v1
..):)

FCall:FCall
..PrimFName:cdr
..(:(
..SymbolLiteral:v2
..):)

FCall:FCall
..PrimFName:car
..(:(
..ListLiteral:ListLiteral
....[:[
....]:]
..):)

FCall:FCall
..PrimFName:cdr
..(:(
..ListLiteral:ListLiteral
....[:[
....]:]
..):)

FCall:FCall
..PrimFName:car
..(:(
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v3
....]:]
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v3
....]:]
..):)

FCall:FCall
..PrimFName:cdr
..(:(
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v4
....]:]
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v4
....]:]
..):)

FCall:FCall
..PrimFName:cons
..(:(
..):)

FCall:FCall
..PrimFName:cons
..(:(
..SymbolLiteral:v5
..):)

FCall:FCall
..PrimFName:cons
..(:(
..ListLiteral:ListLiteral
....[:[
....]:]
..):)

FCall:FCall
..PrimFName:cons
..(:(
..SymbolLiteral:v6
..SymbolLiteral:v6
..):)

FCall:FCall
..PrimFName:cons
..(:(
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v7
....]:]
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v7
....]:]
..):)

FCall:FCall
..PrimFName:cons
..(:(
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v8
....]:]
..SymbolLiteral:v8
..):)

FCall:FCall
..PrimFName:cons
..(:(
..SymbolLiteral:v9
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v9
....]:]
..ListLiteral:ListLiteral
....[:[
....SymbolLiteral:v9
....]:]
..):)

FCall:FCall
..UserFName:h0
..(:(
..SymbolLiteral:w0
..):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:x6
......(:(
......Var:X6
......):)
....FCall:FCall
......UserFName:y6
......(:(
......):)
..FCall:FCall
....UserFName:x6
....(:(
....SymbolLiteral:x6
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:x7
......(:(
......Var:X7
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......Var:Y7
......Var:X7
......):)
..FCall:FCall
....UserFName:x7
....(:(
....ListLiteral:ListLiteral
......[:[
......]:]
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....FCall:FCall
......UserFName:x8
......(:(
......):)
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b8
......]:]
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:a8
....FCall:FCall
......UserFName:x8
......(:(
......SymbolLiteral:b8
......):)
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:x9
......(:(
......Var:X9
......):)
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:b9
......]:]
..FCall:FCall
....PrimFName:cons
....(:(
....SymbolLiteral:a9
....FCall:FCall
......UserFName:v0
......(:(
......):)
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:h1
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:X
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:h1
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..FCall:FCall
....UserFName:h1
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h11
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h12
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h13
......]:]
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:h2
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:Z
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:h2
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..FCall:FCall
....UserFName:h2
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h21
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h22
......]:]
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:h3
......(:(
......Var:X
......Var:Y
......):)
....IfExpr:IfExpr
......if:if
......Var:X
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:X
..........):)
........FCall:FCall
..........UserFName:h1
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:X
............):)
..........Var:Y
..........):)
........):)
......Var:Y
..FCall:FCall
....UserFName:h3
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h31
......]:]
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h32
......]:]
....):)

Found unread symbols at the end of the input: [UserFName:k5, (:(, UserFName:h5, (:(, [:[, SymbolLiteral:hk5, ]:], ):), ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:h6
......(:(
......Var:X6
......):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:k6
..........(:(
..........Var:Y6
..........):)
........FCall:FCall
..........PrimFName:cons
..........(:(
..........SymbolLiteral:k6
..........Var:Y6
..........):)
......FCall:FCall
........PrimFName:cons
........(:(
........SymbolLiteral:h6
........Var:X6
........):)
..FCall:FCall
....UserFName:h6
....(:(
....FCall:FCall
......UserFName:k6
......(:(
......ListLiteral:ListLiteral
........[:[
........SymbolLiteral:hk6
........]:]
......):)
....):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....FCall:FCall
......UserFName:k7
......(:(
......):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:h7
..........(:(
..........Var:X7
..........):)
........FCall:FCall
..........PrimFName:cons
..........(:(
..........FCall:FCall
............UserFName:k7
............(:(
............):)
..........Var:X7
..........):)
......SymbolLiteral:k7
..FCall:FCall
....UserFName:h7
....(:(
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:h71
......]:]
....):)


input string cannot be null
 found, Expr expected
illegal token: 3
 found, ( expected
Found unread symbols at the end of the input: [Var:B]
d00 found, ( expected
(:( found, Expr expected
) found, ListLiteral expected
d1 found, ListLiteral expected
 found, ] expected
illegal token: 1776
( found, ) expected
]:] found, Expr expected
]:] found, Expr expected
Found unread symbols at the end of the input: [):)]
Found unread symbols at the end of the input: [(:(, ):)]
if:if found, Expr expected
SymbolLiteral:u1 found, Expr expected
SymbolLiteral:u3 found, Expr expected
Found unread symbols at the end of the input: [SymbolLiteral:u7]
):) found, Expr expected
 found, define expected
) found, define expected
if found, define expected
define:define found, Expr expected
V0 found, UserFName expected
define found, UserFName expected
car found, UserFName expected
W found, ( expected
) found, ( expected
 found, ) expected
 found, Expr expected
[ found, ( expected
 found, ) expected
 found, Expr expected
(:( found, Expr expected
Found unread symbols at the end of the input: [UserFName:w9, (:(, ):)]
v9 found, ( expected
) found, ( expected
(:( found, Expr expected

Found unread symbols at the end of the input: [define:define, UserFName:p2, (:(, ):), SymbolLiteral:r2, PrimFName:cons, (:(, UserFName:p2, (:(, ):), UserFName:q2, (:(, ):), ):)]
Found unread symbols at the end of the input: [define:define, UserFName:p3, (:(, Var:X, ):), PrimFName:car, (:(, Var:X, ):), PrimFName:cons, (:(, UserFName:p3, (:(, ):), UserFName:q3, (:(, ):), ):)]
Found unread symbols at the end of the input: [define:define, UserFName:p4, (:(, Var:X, ):), PrimFName:car, (:(, Var:X, ):), UserFName:p4, (:(, UserFName:q4, (:(, ):), ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:p5
......(:(
......Var:X
......Var:Y
......Var:X
......):)
....FCall:FCall
......PrimFName:cons
......(:(
......Var:X
......Var:Y
......):)
..FCall:FCall
....UserFName:p5
....(:(
....SymbolLiteral:p5
....ListLiteral:ListLiteral
......[:[
......SymbolLiteral:q5
......]:]
....SymbolLiteral:q5
....):)


Found unread symbols at the end of the input: [UserFName:h4, (:(, [:[, SymbolLiteral:h41, ]:], ):)]
Found unread symbols at the end of the input: [define:define, UserFName:h5, (:(, Var:H51, ):), PrimFName:cons, (:(, SymbolLiteral:h51, Var:H51, ):), UserFName:k5, (:(, [:[, ]:], ):)]
Found unread symbols at the end of the input: [UserFName:reverse, (:(, [:[, SymbolLiteral:g31, SymbolLiteral:g32, SymbolLiteral:g33, SymbolLiteral:g34, ]:], ):)]
LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:append
......(:(
......Var:U
......Var:V
......):)
....IfExpr:IfExpr
......if:if
......Var:U
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........PrimFName:car
..........(:(
..........Var:U
..........):)
........FCall:FCall
..........UserFName:append
..........(:(
..........FCall:FCall
............PrimFName:cdr
............(:(
............Var:U
............):)
..........Var:V
..........):)
........):)
......Var:V
..LetExpr:LetExpr
....let:let
....Def:Def
......define:define
......Sig:Sig
........UserFName:f
........(:(
........Var:X
........Var:Y
........):)
......LetExpr:LetExpr
........let:let
........Def:Def
..........define:define
..........Sig:Sig
............UserFName:g
............(:(
............Var:Y
............Var:V
............):)
..........FCall:FCall
............UserFName:h
............(:(
............SymbolLiteral:25
............SymbolLiteral:26
............):)
........LetExpr:LetExpr
..........let:let
..........Def:Def
............define:define
............Sig:Sig
..............UserFName:h
..............(:(
..............Var:X
..............Var:W
..............):)
............FCall:FCall
..............PrimFName:cons
..............(:(
..............Var:X
..............FCall:FCall
................PrimFName:cons
................(:(
................Var:W
................FCall:FCall
..................PrimFName:cons
..................(:(
..................Var:Y
..................ListLiteral:ListLiteral
....................[:[
....................]:]
..................):)
................):)
..............):)
..........FCall:FCall
............UserFName:append
............(:(
............FCall:FCall
..............UserFName:g
..............(:(
..............SymbolLiteral:15
..............SymbolLiteral:16
..............):)
............FCall:FCall
..............UserFName:h
..............(:(
..............SymbolLiteral:0
..............SymbolLiteral:1
..............):)
............):)
....FCall:FCall
......UserFName:f
......(:(
......SymbolLiteral:5
......SymbolLiteral:6
......):)

LetExpr:LetExpr
..let:let
..Def:Def
....define:define
....Sig:Sig
......UserFName:k
......(:(
......Var:XX
......):)
....SymbolLiteral:k
..LetExpr:LetExpr
....let:let
....Def:Def
......define:define
......Sig:Sig
........UserFName:h
........(:(
........Var:VV
........):)
......Sig:Sig
........UserFName:k
........(:(
........Var:VV
........):)
....LetExpr:LetExpr
......let:let
......Def:Def
........define:define
........Sig:Sig
..........UserFName:g
..........(:(
..........Var:WW
..........):)
........LetExpr:LetExpr
..........let:let
..........Def:Def
............define:define
............Sig:Sig
..............UserFName:k
..............(:(
..............Var:X
..............):)
............FCall:FCall
..............PrimFName:cons
..............(:(
..............Var:X
..............FCall:FCall
................PrimFName:cons
................(:(
................Var:WW
................ListLiteral:ListLiteral
..................[:[
..................]:]
................):)
..............):)
..........Sig:Sig
............UserFName:h
............(:(
............Var:WW
............):)
......FCall:FCall
........PrimFName:cons
........(:(
........FCall:FCall
..........UserFName:k
..........(:(
..........SymbolLiteral:1
..........):)
........FCall:FCall
..........UserFName:g
..........(:(
..........SymbolLiteral:2
..........):)
........):)

BUILD SUCCESSFUL (total time: 0 seconds)
